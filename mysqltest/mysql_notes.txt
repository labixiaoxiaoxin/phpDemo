										约束以及修改数据库
----------------------------------------------------------------------------------------------

【 约束 】
自动编号：			auto_increment  必须与primary key配合使用，
					但primary key不一定需要有auto_increment
主键约束：			primary key  唯一性 非空性 只能有一个
唯一约束：			unique key 	唯一性 可以为空 可以有多个
默认约束：			default     当字段赋值为空时，选择默认值
非空约束：			not null	不设置则默认为null

外键约束：			foreign key
					语法：		FOREIGN KEY (Id_P) REFERENCES Persons(Id_P)
					父表和字表必须使用相同的存储引擎，禁止使用临时表
					数据表的存储引擎智能是InnoDB
					外键列和参照列必须具有相似的数据类型，数字长度或是否有符号为必须相同，字符则可以不同
					外键列和参照列必须创建索引，如果外键列不存在索引，mysql将自动创建索引

					CASCADE:	从父表删除或更新，自动删除或更新子表中匹配的行
					SET NULL:	从父表删除或更新行，并设置字表中的外键为null，但要保证字表没设置not null
					RESTRICT:	拒绝对父表的删除或更新操作
					NO ACTION:	与RESTRICT相同

					注意：
					在外键约束当中，在实际的开发过程中，我们很少使用物理的外键约束，很多都去使用逻辑的外键约束，因为物理的外键约束只有INNODB这种引擎才会支持，像我们另外的一种引擎MYISAM的引擎则不支持，反过来说，如果我想创建的数据表，假设存储引擎为MYISAM，而且又想使用外键约束的话，其实是不可能实现的，所以说，我们在实际的项目开发中，我们不去定义物理的外键，所谓的逻辑外键指的是就是我们在定义两张表的结构的时候，我们是按照存在的某种结构的方式去定义，但是不去使用FOREIGN KEY这个关键词来定义。

添加外键约束：		ALTER TABLE users2 ADD FOREIGN KEY(pid) REFERENCES provinces (id);
添加默认约束：		ALTER TABLE users2 ALTER age SET DEFAULT 15;
删除默认约束：		ALTER TABLE users2 ALTER age DROP DEFAULT;
删除主键约束：		ALTER TABLE tbl_name DROP PRIMARY KEY;
删除唯一约束：		ALTER TABLE tbl_name DROP {INDEX|KEY} index_name;
删除外键约束：		ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol; //删除外键，要带上外键名字

【 修改列定义 】
					ALTER TABLE tbl_name MODIFY [COLUMN] col_name column_definition [FIRST |AFTER col_name];
					ALTER TABLE users2 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST; //将id字段的位置提到第一列
					SHOW COLUMNS FROM users2;
					ALTER TABLE users2 MODIFY id TINYINT UNSIGNED NOT NULL; //修改数据类型,需注意数据丢失的问题

【 修改列名称 】
					ALTER TABLE tbl_name CHANGE [COLUMN] col_name new_col_name column_definition [FIRST|AFTER col_name];
					ALTER TABLE users2 CHANGE pid p_id TINYINT UNSIGNED; //修改列名称

【 数据表更名 】
方法1:				ALTER TABLE tbl_name RENAME [TO/AS] new_tbl_name
					ALTER TABLE users2 RENAME (to/as) users3;
					SHOW TABLES;
方法2:				RENAME TABLE tbl_name TO new_tbl_name [, tbl_name2 TO new_tbl_name2] ...
					RENAME TABLE users5 TO users2;
					注意：尽量少使用数据表的列名及表名的更名。

【 约束 】
按功能划分:			NOT NULL, PRIMARY KEY, UNIQUE KEY, DEFAULT, FOREIGN KEY
按数据列的数目划分:	表级约束, 列级约束

【 修改数据表 】
针对字段的操作:		添加/删除字段、修改列定义、修改列名称等
针对约束的操作:		添加/删除各种约束
针对数据表的操作:		数据表更名(两种方式)


										操作数据表中的记录
----------------------------------------------------------------------------------------------

【 INSERT 】
第一种:				insert tb_name [column_name]values(...)[,(...),(....)];
					比较常用，可以一次性插入多条记录，并且可以输入表达式甚至是函数，但是无法进行子查询。
第二种：				insert tb_name set column_name={exprdefault};
					可以进行子查询，但是只能插入一条记录的多个字段,但一次只能插入一条记录(INSERT [INTO] 表名 SET 列名1=列值1, 列名2=列值2,...;)。
第三种：				insert table_name [(colname...)] select语句.....
					这种方法就是把查询到的一个表结果插入到另一个指定数据表中。
					INSERT tbl_name(username) select username from users where age>=20; 

【 UPDATE 】
单表更新：			UPDATE table_reference SET col_name={expr|DEFAULT} WHERE where_condition

【 DELETE 】
单表删除：			DELETE FROM tbl_name [WHERE where condition];

【 SELECT 】
AS：					SELECT id AS userId,username AS uname FROM users;
					字段别名也将影响以后的结果集中的字段别名

WHERE
					条件表达式：对记录进行过滤，如果没有指定where子句，则显示所有记录。
					在where表达式中，可以使用MySQL支持的函数或运算符。

【 GROUP BY 】
查询结果分组：		SELECT 字段名 FROM 表名 GROUP BY 字段名;
HAVING:				Having 后面只能加select的字段或者聚合函数(SUM、MAX、COUNT等)的条件。
					SELECT sex FROM users GROUP BY 1 HAVING age > 35; //有错
					SELECT sex, age FROM users GROUP BY 1 HAVING age > 35;
					SELECT sex FROM users GROUP BY 1 HAVING count(id) >= 2;

【 ORDER BY 】
					select * from users order by id desc; //对一个字段排序
					select * from users order by age asc,id desc; //两个字段同时排序

【 LIMIT 】
					SELECT * FROM users LIMIT 2; // 从第一条开始（第一个为0），返回两条
					SELECT * FROM users LIMIT 2,3 ;//从第三条开始（第一个为0），返回三条


										子查询与连接
----------------------------------------------------------------------------------------------

【 子查询 】
由比较运算符引发的：
					——————————————————————————————————————————————————
					|		        |   ANY   |  SOME    |    ALL    |
					——————————————————————————————————————————————————
					|    > 、>=      |  最小值  |  最小值  |   最大值   |
					——————————————————————————————————————————————————
					|    < 、<=      |  最大值  |  最大值  |   最小值   |
					——————————————————————————————————————————————————
					|      =        | 任意值   |  任意值  |           |
					——————————————————————————————————————————————————
					|   < 、>、!=     |         |         |   任意值   |
					——————————————————————————————————————————————————
					SELECT * from tdb_goods where goods_price>=ANY(SELECT goods_price FROM tdb_goods WHERE goods_cate="超级本");
					SELECT * from tdb_goods where goods_price>=ALL(SELECT goods_price FROM tdb_goods WHERE goods_cate="超级本");
					SELECT * from tdb_goods where goods_price=SOME(SELECT goods_price FROM tdb_goods WHERE goods_cate="超级本");

由[not]IN/EXISTS
引发的：				any 运算符与in 等效。!=all或<> all运算符与not in等效。
					使用[not] exists的子查询，如果子查询返回任何行，exists将返回ture;否则为false。

【 INSERT...SELECT 】
					INSERT INTO tdb_goods_cates (cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;		//从表tdb_goods写入分类名到表tdb_goods_cates中

【 多表更新 】
					UPDATE tdb_goods INNER JOIN tdb_goods_cates on goods_cate=cate_name SET goods_cate=cate_id;

【 CREATE...SELECT 】
					CREATE TABLE tdb_goods_brands(
							brand_id SMALLINT UNSIGNED PRIMARY KEY auto_increment,
							brand_name VARCHAR(40) NOT NULL
					)SELECT brand_name FROM tdb_goods GROUP BY brand_name;
					//创建数据表并且同时写入记录

					UPDATE tdb_goods as g INNER JOIN tdb_goods_brands AS b ON g.brand_name=b.brand_name SET g.brand_name=b.brand_id;
					//更新tdb_goods数据表（表连接）
					
					desc tdb_goods;
					//查看数据表结构
					ALTER TABLE tdb_goods CHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,CHANGE brand_name brand_id SMALLINT UNSIGNED NOT null;
					//修改数据表结构（包括字段名和类型等）
					SELECT * from tdb_goods;

【 连接 】
内连接：				INNER JOIN | CROSS JOIN | JOIN   三个等价
外连接：				LEFT JOIN  | RIGHT JOIN			 左外连接和右外连接

【 内连接 】			交集，只显示符合的结果
					SELECT goods_id,goods_name,goods_price,cate_name from tdb_goods INNER JOIN tdb_goods_cates ON tdb_goods.cate_id=tdb_goods_cates.cate_id;

					使用ON设定连接条件，也可以用WHERE代替
  					一般情况下使用： ON---设定连接条件   WHERE---进行结果集记录的过滤

  					如果使用内连接查找记录在连接数据表中不存在，并且在where子句中尝试以下操作：col_named is null时，如果col_name被定义为not null,mysql将在找到符合连执着条件的记录后停止搜索更多的行。

【 外连接 】
					LEFT JOIN：显示左表全部和左右符合连接条件的记录
					RIGHT JOIN：显示左右符合连接条件的记录和右表全部记录
					若某字段只存在某一表，则另一表的里字段返回null
					SELECT goods_id,goods_name,goods_price,cate_name from tdb_goods LEFT JOIN tdb_goods_cates ON tdb_goods.cate_id=tdb_goods_cates.cate_id;
					//例子中左表全部显示，右表符合条件显示，没有则显示null

【 多表连接 】
					SELECT goods_id,goods_name,cate_name,brand_name,goods_price from tdb_goods as g INNER JOIN tdb_goods_cates as c ON g.cate_id=c.cate_id INNER JOIN tdb_goods_brands as b ON g.brand_id=b.brand_id;
					//三张表连接，注意，两个inner join之间没有逗号

【 无限级分类表设计 】
					CREATE TABLE tdb_goods_types(
					    type_id   SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
					    type_name VARCHAR(20) NOT NULL,
					    parent_id SMALLINT UNSIGNED NOT NULL DEFAULT 0
					); 
自身连接：			//查找所有分类及其父类
					SELECT s.type_id,s.type_name,p.type_name FROM tdb_goods_types AS s LEFT JOIN tdb_goods_types AS  p ON s.parent_id = p.type_id;
					//查找所有分类及其子类
					SELECT p.type_id,p.type_name,s.type_name FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS  s ON s.parent_id = p.type_id;
					//查找所有分类及其子类的数目
					SELECT p.type_id,p.type_name,count(s.type_name) AS children_count FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS s ON s.parent_id = p.type_id GROUP BY p.type_id;

【 多表删除 】
					//复制编号为19,20的两条记录
 					SELECT * FROM tdb_goods WHERE goods_id IN (19,20);
					//INSERT ... SELECT实现复制
					INSERT tdb_goods(goods_name,cate_id,brand_id) SELECT goods_name,cate_id,brand_id FROM tdb_goods WHERE goods_id IN (19,20);
					//查找重复记录
					SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2;
					//删除重复记录
					DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2 ) AS t2  ON t1.goods_name = t2.goods_name  WHERE t1.goods_id > t2.goods_id;


										运算符与函数
----------------------------------------------------------------------------------------------

【 字符函数 】
CONCAT()			字符连接
					SELECT CONCAT('a','-','b');  结果为:a-b
CONCAT_WS()			使用指定的分隔符进行字符连接
					SELECT CONCAT_WS('|','A','B','C');   结果为： A|B|C
FORMAT()			数字格式化
					SELECT FORMAT(12560.7,2);  结果：12，560.70
					SELECT FORMAT(12560.78,1); 结果：12，560.8
LOWER()				转换成小写字母
UPPER()				转换成大写字母
LEFT()  			获取左侧字符
					SELECT LEFT('mysql',2);  结果：my
RIGHT() 			获取右侧字符
LTRIM() 			删除前导空格(=LEFT TRIM())
RTRIM() 			删除后续空格
TRIM()				删除前后两边的空格，还可以删除指定的前导和后续的字符,不能删除中间的字符
					SELECT TRIM(LEADING'?','??MYSQL????');  结果：MYSQL????
					SELECT TRIM(TRAILING'?','??MYSQL????');  结果：??MYSQL
					SELECT TRIM(BOTH'?','??MYSQL???');  结果：MYSQL
REPLACE() 			替换字符
					SELECT REPLACE('??MYSQL???','?','-');  结果：--MYSQL---
SUBSTRING()   		截取字符串
					SELECT SUBSTRING('MYSQL',2,3);  结果：SQL
[NOT]LIKE  			模糊匹配
					(%)：代表任意个字符，0个或多个
					(_)：代表任意一个字符，只有一个
					SELECT name FROM test WHERE name LIKE'%O%';  结果：输入name 中带‘O’的name
					SELECT name FROM test WHERE name LIKE'%1%%' ESCAPE'1';   找到中间带% 的匹配name

【 数值运算符与函数 】
ceil() 				进一取整/向上取整
					select cell(3.01);	(结果如下：4)
div() 				整数除法
					select 3 div 4;	(结果如下：0)
floor() 			舍一取整
					select floor(3.01);	(结果如下：3)
mod 				取余数（取模）
					select 5.3 %/mod 3;	(结果如下：2.3)
power()				幂运算
					select power(3,3);	(结果如下：27)
round() 			四舍五入
					select round(3.652,0);	(结果如下：4)
truncate() 			数字截取
					select truncate(125.89,0);	(结果如下：125)
					select truncate(125.89,-1);	(结果如下：120)

【 比较运算符与函数 】
IS [NOT] NULL
					判断某个字段是否是NULL，如：SELECT * FROM test WHERE first_name IS NULL;
[NOT] IN
					判断某个字段是否在给定数据内，如SELECT 16 IN(1，2，16，68),返回的是true(1).（可用于字符串）
[NOT] BETWEEN..AND..
					判断某个字段是否在给定区间内，如SELECT 6 BETWEEN 0 AND 29，返回的是true(1)。

【 日期时间函数 】
now() 				当前日期和时间
curdate() 			当前日期
curtime() 			当前时间
date_add() 			日期变化[可加可减]
					select date_add('2014-3-12',interval 365 day);(结果如下：2015-3-12)
					select date_add('2014-3-12',interval -365 day);(结果如下：2013-3-12)
					select date_add('2014-3-12',interval 3 week);(结果如下：2014-4-2)
datediff() 			日期差值
					select datediff('2013-3-12','2014-3-12');(结果如下：-365)
date_format() 		日期格式化
					select date_format('2014-3-2','%m/%d/%Y');
					(结果如下：03/02/2014[百分号为单数日期前面加0])

【 信息函数 】
connection_id() 	连接ID
datebase() 			当前数据库
last_insert_id() 	最后插入记录的ID号
user() 				当前用户
version()			版本信息

【 聚合函数 】
AVG()				平均值
COUNT()				计数
MAX()				最大值
MIN()				最小值
SUM()				求和

【 加密函数 】
MD5()				信息摘要算法
					SELECT MD5('admin'); MD5对admin进行了加工，并返回加工后的数据
PASSWORD()			密码算法
					SET PASSWORD=PASSWORD(‘dimitar’); 把密码修改成dimitar


										自定义函数
----------------------------------------------------------------------------------------------

创建自定义函数： 		
					注意，函数必须有返回值，如果要无返回值的，应该创建‘存储过程’（函数返回值只能有一个，存储过程可以没有或多个（通过select），而且存储过程可以通过out为变量赋值，而函数不行）
                  	函数的参数最好和表的字段名字不一样，如果相同的话，在使用时，应该用表名.字段名进行区分
					CREATE FUNCTION 函数名(参数名1 类型1，参数名2 类型2，....)
					[DEFINER = {user|CURRENT_USER}]//定义时的用户，若是不写就默认为当前用户
					RETURNS  返回类型
					RETURN   函数体;
关于函数体:
					(1)函数体由合法的SQL语法构成;
					(2)函数体可以是简单的SELECT或INSERT语句;（允许用select ... into 变量 来把值写入，但不允许SELECT ..来返回结果集，因为函数只允许有一个返回值（切记，select会返回结果集，并不是只有return才是返回））
					(3)函数体如果为复合结构则使用BEGIN...END语句;
					(4)复合结构可以包括声明，循环，控制结构。

					//用自定义函数写出想要的日期表达方式（无参数）
					CREATE FUNCTION f1() RETURNS VARCHAR(30)//创建一个f1()函数
					RETURN DATE_FORMAT(NOW(),'%Y年 %m月 %d日 %H点：%i分：%s秒');//返回值
					SELECT f1();//调用自定义函数f1();

					//用自定义函数求平均值（有参数）
					CREATE FUNCTION f2(num1 SMALLINT UNSIGNED,num2 SMALLINT UNSIGNED) RETURNS float(10,2) RETURN (num1+num2)/2;
					SELECT f2(101,15);

					//创建具有复合结构的函数体（函数体必须包含在BEGIN...END中）
					DELIMITER //           //以双斜杠为命令结束符
					CREATE FUNCTION ADD_USER(p_id SMALLINT,username VARCHAR(20))
					RETURNS INT UNSIGNED
					BEGIN
					INSERT user(p_id,username) VALUES(p_id,username);
					RETURN LAST_INSERT_ID();
					END
					//


										MySQL存储过程
----------------------------------------------------------------------------------------------

存储过程的优点：
					(1)增强SQL语句的功能和灵活性
					(2)实现较快的执行速度
					(3)减少网络流量

存储过程语法结构分析：
					CREATE
					[DEFINER = {user|CURRENT_USER}]//定义时的用户，若是不写就默认为当前用户
					PROCEDURE sp_name ([proc_parameter[,...]])
					//可以带0到多个参数sp_name存储过程的名字
					[characteristic ...] routine_body
					其中参数：
					proc_parameter:
					[IN|OUT|INOUT] param_name type
					IN, 表示该参数的值必须在调用存储过程时指定
					OUT, 表示该参数的值可以被存储过程改变，并且可以返回
					INOUT, 表示该参数的值调用时指定，并且可以被改变和返回
特性：
					COMMENT 'string'
					{CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES SQL DATA|SQL SECURITY{DEFINER|INVOKER}
					COMMENT:注释
					CONTAINS SQL:包含SQL语句, 但不包含读或写数据的语句
					NO SQL:不包含SQL语句
					READS SQL DATA:包含读数据的语句
					MODIFIES SQL DATA:包含写数据的语句
					SQL SECURITY {DEFINER|INVOKER}指明谁有权限来执行
过程体：
					(1)过程体由合法的SQL语句构成；
					(2)过程体可以是任意SQL语句;对表格进行增删，连接，但是不能创建数据表<br>
					(3)过程体如果为复合结构则使用BEGIN...END语句
					(4)复合结构可以使用条件、循环等控制语句

无参数：
					创建存储过程：
					CREATE PROCEDURE sp1() SELECT VERSION();
					调用存储过程：
					用CALL sp1()；//调用

					call sp_name([参数]);
					call sp_name;
					第一个是带参数，第二个不带参数，区别是封装的过程没有参数的话小括号带有或不带有都可以，但是存储过程带有参数的话，那么小括号就不能省略

带有IN类型参数：
					delimiter //    //修改定界符
					create procedure removeUserById(in p_id int unsigned)
					begin
					delete from users id=p_id;(参数名不能和表中的字段名相同，否则全部删除)
					end
					//
					delimiter ;		//把定界符改回去
					调用存储过程
					call removeUsersById(3);
					select * from users where id=3;(结果Empty，说明记录已被删除)

删除存储过程：		（不能修改过程体，要修改过程题必须删除后重建）
					drop procedure removeUsersById;(删除存储过程)

带有IN和OUT参数：
					DELIMITER //
					CREATE PROCEDURE removeUserAndReturnUserNums(IN p_id INT UNSIGNED, OUT userNums INT UNSIGNED)
					BEGIN
					DELETE FROM users WHERE id = p_id;
					SELETE count(id) FROM users INTO userNums; //把select结果放入userNums中
					END//
					delimiter ;
					调用存储过程
					call removeUserAndReturnUserNums(27,@nums);[@nums存储过程返回的值]
					select @nums;

【 变量 】
用户变量：			以"@"开始，形式为"@变量名"
					用户变量跟mysql客户端是绑定的，设置的变量，只对当前用户使用的客户端生效
					可用 set @变量名=值 来创建变量并赋值（多次使用只是会覆盖，而不是报错），如果是调用存储过程时，给out的变量传入一个@变量，也相当于创建用户变量并传入，在存储过程内被赋值
全局变量：			定义时，以如下两种形式出现，set GLOBAL 变量名  或者  set @@global.变量名 
					对所有客户端生效。只有具有super权限才可以设置全局变量
会话变量：			只对连接的客户端有效。
局部变量：			作用范围在begin到end语句块之间。在该语句块里设置的变量
					declare语句专门用于定义局部变量（必须位于句首，即begin之下的第一行）。
					如DECLARE 变量名 数据类型
					set语句可以为各种变量赋值，即set 变量=变量值

带有多个OUT类型参数：
					DELIMITER //
					CREATE PROCEDURE rmUserByAgeAndRtInfos(IN p_age SMALLINT UNSIGNED, OUT delNums SMALLINT UNSIGNED, OUT leftNums SMALLINT UNSIGNED)
					BEGIN
					DELETE FROM users WHERE age = p_age; //注意变量不同
					SELECT ROW_COUNT() INTO deleteUsers;//ROW_COUNT()返回被影响的记录数
					SELECT COUNT(id) FROM users INTO leftNums;//同上
					END
					//
					DELIMITER ;
					CALL rmUserByAgeAndRtInfos(20, @a, @b);   //删除记录数，剩下记录数
					SELECT @a, @b;

存储过程和函数的区别：
					(1)存储过程的功能要复杂一些，可以针对表进行操作。函数的针对性比较强，一般对数据进行操作。
					(2)存储过程可以返回多个值，函数只能返回一个值。
					(3)存储过程一般是独立的执行，函数一般作为其他sql里的组成部分出现。


										MySQL存储引擎
----------------------------------------------------------------------------------------------

查看数据表的创建命令：
					show create table tbl_name;

存储引擎：
					MySql可以将数据以不同的技术存储在文件（内存）中，每一种存储引擎使用不同的存储机制、索引技巧、锁定水平，最终提供广泛且不同的功能

类型：
					MyISAM
					InnoDB
					Memory
					CSV
					Archive

【 并发控制 】
					当多个连接对记录进行修改时保证数据的一致性和完整性。系统使用锁系统来解决这个并发控制，这种锁分为：
共享锁（读锁）：		在同一时间内，多个用户可以读取同一个资源，读取过程中数据不会发生任何变化。
排他锁（写锁）：		在任何时候只能有一个用户写入资源，当进行写锁时会阻塞其他的读锁或者写锁操作。
锁的力度（锁的颗粒）：
					表锁，是一种开销最小的锁策略。得到数据表的写锁
					行锁，是一种开销最大的锁策略。并行性最大
					表锁的开销最小，因为使用锁的个数最小，行锁的开销最大，因为可能使用锁的个数比较多。

【 事务 】
					用于保证数据的完整性
事务特性(ACID)：
					原子性（atomicity）
					一致性（consistency）
					隔离型（isolation）
					持久性（durability）

外键：
    				是保证数据一致性的策略
索引：
    				是对数据表中的一列或多列的值进行排序的一种结构	

各种存储引擎的特点：
					------------------------------------------------------------
					特点		 |	MyISAM		InnoDB 		Memory		Archive
					------------------------------------------------------------
					存储限制	 |	256TB		64TB		有 			无
					事务安全	 |	-			支持 		-			-
					支持索引	 |	支持 		支持 		支持 		-
					锁颗粒 	 |	表锁 		行锁 		表锁 		行锁
					数据压缩	 |	支持 		-			-			支持
					支持外键	 |	-			支持 		-			-
					------------------------------------------------------------
					
					MyISAM：适用于事务的处理不多的情况。
							存储限制可达256TB，支持索引、表级锁定、数据压缩。
					InnoDB：适用于事务处理比较多，需要有外键支持的情况。
							存储限制为64TB，支持事务和索引、锁颗粒为行锁。

【 修改存储引擎的方法 】
通过修改Mysql配置文件实现：
					default-storage-engine = engine
通过创建数据表命令实现：
					create table tp1(
					s1 varchar(10)
					) engine = myisam;
通过修改数据表命令实现：
					alter table tp1 engine = innodb;
