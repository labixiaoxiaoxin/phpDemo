
								基本语法
-----------------------------------------------------------------------

操作符优先级（高到低）:
					算术操作符 → 比较操作符 → 逻辑操作符 → "="赋值符号

								事件响应
-----------------------------------------------------------------------

onclick				单击事件
onmouseover			鼠标经过
onmouseout			鼠标离开
onfocus				获得焦点
onblur				失去焦点
onselect			选中内容
onchange			改变内容
onload				加载事件
onunload			卸载事件
					window.onunload=onunload_message;//不用()，只有ie支持
					function onunload_message(){
						alert("您确定要离开本页面吗");
					}

								内置对象
-----------------------------------------------------------------------

访问对象属性的语法:
					objectName.propertyName
访问对象的方法：
					objectName.methodName()

【 日期 】
当前时间：			var obj=new Date();
返回年份：			obj.getFullYear();
设置年份：			obj.setFullYear();
返回星期：			obj.getDay();
					var weekday=["星期日","星期一","星期二","星期三","星期四","星期五","星期六"];
					document.write("今天是："+weekday[obj.getDay()]+"<br>");
当前时间：			obj.getTime();
设置时间：			obj.setTime();
					obj.setTime(obj.getTime()+2*60*60*1000);

【 字符串 】
转换为小写：			obj.toLowerCase();
转换为大写：			obj.toUpperCase();
返回指定位置字符：	obj.charAt(index);
					index在0~obj.length-1之间
返回指定字符首次出现位置：
					obj.indexOf(substring,start);
					mystr.indexOf("a");//第一个a
					mystr.indexOf("a",mystr.indexOf("a")+1);//第2个a
字符串分割：			obj.split(separator,limit);
					参数：
						separator 分割符
						limit   分割次数
字符串提取：			obj.substring(start,stop);
字符串提取(指定数目)：
					obj.substr(start,length);

【 Math 】
					Math 对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法。这是它与Date,String对象的区别。

向上取整：			Math.ceil(x);
向下取整：			Math.floor(x);
四舍五入：			Math.round(x);
随机数：				Math.random();		//0-1之间随机数
					Math.random()*10;	//0-10之间随机数

【 Array 】
定义：				var  数组名= new Array();
					var  数组名= new Array(n);
					var  数组名 = [<元素1>, <元素2>, <元素3>...];

数组连接：			obj.concat(array1,array2,...arrayN);
指定字符连接数组：	obj.join(分隔符);
颠倒数组元素顺序：	obj.reverse();
返回选定元素：		obj.slice(start,end);

数组排序：			obj.sort(方法函数);

					function sortNum(a,b) {
						return b-a; //降序，升序a-b
					}
					var myarr = new Array("80","16","50","6","100","1");
					document.write(myarr.sort(sortNum)+"<br>");

					(1) 如果不指定<方法函数>，则按unicode码顺序排列。
					(2) 如果指定<方法函数>，则按<方法函数>所指定的排序方法排序。
					myArray.sort(sortMethod);
					注意: 该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下： 
						若返回值<=-1，则表示 A 在排序后的序列中出现在 B 之前。
						若返回值>-1 && <1，则表示 A 和 B 具有相同的排序顺序。
						若返回值>=1，则表示 A 在排序后的序列中出现在 B 之后。

								浏览器对象
-----------------------------------------------------------------------

【 window对象 】
					window对象是BOM的核心，window对象指当前的浏览器窗口。
【 计时器 】
计时器类型：
					一次性计时器：仅在指定的延迟时间之后触发一次。
					间隔性触发计时器：每隔一定的时间间隔就触发一次。

setInterval			在执行时,从载入页面后每隔指定的时间执行代码。
					setInterval(代码,交互时间);

clearInterval		取消由 setInterval() 设置的交互时间。
					clearInterval(id_of_setInterval);

setTimeout			在载入后延迟指定时间后,去执行一次表达式,仅执行一次。
					setTimeout(代码,延迟时间);

clearTimeout		setTimeout()和clearTimeout()一起使用，停止计时器。
					clearTimeout(id_of_setTimeout);

【 history 】				
浏览器历史url数量：	window.history.length;
返回上一个页面：		window.history.back();
					window.history.go(-1);
返回下一个页面： 		window.history.forward();
					window.history.go(1);
返回历史其他页面：	window.history.go(n);

【 location 】
					用于获取或设置窗体的url ， 并且可以用于解析 url。
					location.[属性][方法]
对象属性:
					属性                  描述
					hash          设置或返回从（#）开始的URL（锚）
					host          设置或返回主机名和当前URL的端口号
					hostname      设置或返回当前URL的主机名
					href          设置或返回完整的URL
					pathname      设置或返回当前URL的路径部分
					port          设置或返回当前URL的端口号
					protocol      设置或返回当前URL的协议
					search        设置或返回从问号(?)开始的URL（查询部分）

对象方法:
					属性                 描述
					assign()	  加载新的文档
					reload()      重新加载当前文档
					replace()     用新的文档替换当前文档

【 navigator 】
navigator对象 		
					抱愧相关浏览器的信息，通常用于检测浏览器与操作系统的版本。
对象属性：
					appCodeName   浏览器代码名的字符串表示。
					appName 	  返回浏览器的名称。
					appVersion	  返回浏览器的平台和版本信息。
					platform 	  返回运行浏览器的操作系统平台。
					userAgent	  返回由客户机发送服务器的user-agent头部的值

【 screen 】
					screen对象用于获取用户的屏幕信息。
					window.screen.属性
属性：
					height 		  屏幕的高度,单位px
					width 		  屏幕的宽度,单位px
					availHeight   窗口可使用高度,单位px
					availWidth    窗口可使用宽度,单位px
					colorDepth    用户浏览器表示的颜色位数,一般32位
					pixelDepth    用户浏览器表示的颜色位数,一般32位

								DOM对象
-----------------------------------------------------------------------

认识DOM：
					文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。
getElementsByName:
					返回带有指定名称的节点对象的集合。
					document.getElementsByName(name)
					注意：
					(1) name可能不止一个，所以返回的是数组
					(2) 用访问数组一样的方法来访问
getElementsByTagName:
					返回带有指定标签名的节点对象的集合。返回元素的顺序是它们在文档中的顺序。
					document.getElementsByTagName(Tagname)
					注意：
					(1) Tagname是标签的名称，如p、a、img等标签名。
					(2) 和数组一样的方法访问。
区别：
					input标签就像人的类别。
					name属性就像人的姓名，可重复。
					id属性就像人的身份证，唯一。
getAttribute:
					通过元素节点的属性名称获取属性的值。
					elementNode.getAttribute(name)
					(1) elementNode：使用getElementById()、getElementsByTagName()等方法，获取到的元素节点。
					(2) name：要想查询的元素节点的属性名字

setAttribute:		
					增加一个指定名称和值的新属性，或者把一个现有的属性设定为指定的值。
					elementNode.setAttribute(name,value)
					(1) name：要设置的属性名
					(2) value：要设置的属性值

【 节点 】
节点属性：
					nodeName 	节点的名称
					nodeValue 	节点的值
					nodeType 	节点的类型
nodeName：			节点的名称，是只读的。
					(1) 元素节点的 nodeName 与标签名相同
					(2) 属性节点的 nodeName 是属性的名称
					(3) 文本节点的 nodeName 永远是 #text
					(4) 文档节点的 nodeName 永远是 #document
nodeValue：			节点的值
					(1) 元素节点的 nodeValue 是 undefined 或 null
					(2) 文本节点的 nodeValue 是文本自身
					(3) 属性节点的 nodeValue 是属性的值
nodeType：			节点的类型，是只读的。有以下几种：
					元素类型    节点类型
					  元素          1
					  属性          2
					  文本          3
					  注释          8
					  文档          9

【 子节点 】
访问子节点：			
					访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性
					elementNode.childNodes
					注意：
					(1) 节点之间的空白符在firefox、chrome、opera、safari浏览器是文本节点，在IE中不是。
					(2) 如果选定的节点没有子节点，返回不包含节点的NodeList
					document.getElementsByTagName("div")[0].childNodes;
					//[0]表示第一个div，因为标签div可能不唯一。

第一项：				node.firstChild,没有则返回null
最后项：				node.lastChild, 没有则返回null
父节点：				获取指定节点的父节点
					elementNode.parentNode
					注意：父节点只能有一个
兄弟节点：
					(1) nextSibling 属性可返回某个节点之后紧跟的节点（处于同一树层级中）
					nodeObject.nextSibling
					(2) previousSibling 属性可返回某个节点之前紧跟的节点（处于同一树层级中）
					nodeObject.previousSibling
插入节点：
appendChild()		在指定节点的最后一个子节点列表之后添加一个新的子节点。
					appendChild(newnode);
					eg:
					var otest = document.getElementById("test");  
					var newli=document.createElement("li");
					newli.innerHTML="php";
					otest.appendChild(newli);

insertBefore()		可在已有的子节点前插入一个新的子节点。
					insertBefore(newnode,node);

删除节点：			方法从子节点列表中删除某个节点。
					nodeObject.removeChild(node);

替换元素节点：		实现子节点(对象)的替换。返回被替换对象的引用。
					node.replaceChild (newnode,oldnew );

创建元素节点：		可创建元素节点。此方法可返回一个 Element 对象。
					document.createElement(tagName);
					注意：
					要与appendChild() 或 insertBefore()方法联合使用，将元素显示在页面中。

创建文本节点：		创建新的文本节点，返回新创建的 Text 节点。
					document.createTextNode(data);

浏览器窗口可视大小：
					获得浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）的方法
					(1) 对于IE9+、Chrome、Firefox、Opera 以及 Safari：
					window.innerHeight - 浏览器窗口的内部高度
					window.innerWidth - 浏览器窗口的内部宽度
					(2) 对于 Internet Explorer 8、7、6、5：
					document.documentElement.clientHeight
					// 表示HTML文档所在窗口的当前高度。
					document.documentElement.clientWidth
					// 表示HTML文档所在窗口的当前宽度。
					或者
					Document对象的body属性对应HTML文档的<body>标签
					document.body.clientHeight
					document.body.clientWidth
					(3) 在不同浏览器都适用的 JavaScript 方案：(同2)
					var w= document.documentElement.clientWidth
					      || document.body.clientWidth;
					var h= document.documentElement.clientHeight
					      || document.body.clientHeight;

网页尺寸：
					scrollHeight和scrollWidth，获取网页内容高度和宽度。
					var w=document.documentElement.scrollWidth
					   || document.body.scrollWidth;
					var h=document.documentElement.scrollHeight
					   || document.body.scrollHeight;

					offsetHeight和offsetWidth，获取网页内容高度和宽度(包括滚动条等边线，会随窗口的显示大小改变)。
					(1) 值
					offsetHeight = clientHeight + 滚动条 + 边框。
					(2) 浏览器兼容性
					var w= document.documentElement.offsetWidth
					    || document.body.offsetWidth;
					var h= document.documentElement.offsetHeight
					    || document.body.offsetHeight;

网页卷去的距离与偏移量：
scrollLeft:
					设置或获取位于给定对象左边界与窗口中目前可见内容的最左端之间的距离 ，即左边灰色的内容。
scrollTop:
					设置或获取位于对象最顶端与窗口中可见内容的最顶端之间的距离 ，即上边灰色的内容。
offsetLeft:
					获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置 。
offsetTop:
					获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算顶端位置 。
注意:
(1) 区分大小写
(2) offsetParent：布局中设置postion属性(Relative、Absolute、fixed)的父容器，从最近的父节点开始，一层层向上找，直到HTML的body。